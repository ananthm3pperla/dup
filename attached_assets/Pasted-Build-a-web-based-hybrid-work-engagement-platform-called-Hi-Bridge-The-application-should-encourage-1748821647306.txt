Build a web-based hybrid work engagement platform called Hi-Bridge. The application should encourage in-office participation by using gamification, points, team competitions, and daily pulse check-ins. Users fall into three roles: employees, managers, and HR leaders, each with distinct views and permissions.

üîß Key Functional Requirements:

Anchor Day Scheduling: Managers set team anchor days; employees vote on preferred days.

Pulse Checks: Employees complete daily feedback surveys to track morale.

Gamification: Users earn points for participation; scores appear on a team leaderboard.

Dashboards:

Managers: View engagement heatmaps and team sentiment trends.

HR: Access policy compliance, attendance analytics, and configuration tools.

Customizable Policies: Role-based hybrid policies and override support for flexibility.

Integrations: Calendar sync and optional SSO (stub for now).

Beta Testing Mode: Teams upload office photos, earn bonus points, and compete for local business-sponsored rewards.

üõ†Ô∏è Migration Instructions (Refactor from Supabase):

Replace Supabase Postgres with Replit Database (Key-Value or SQLite).

Replace Supabase Auth with custom email/password auth using Express sessions or Replit‚Äôs Auth helper.

Rebuild any Supabase real-time features (e.g., live dashboards) using polling or WebSockets.

Store team-uploaded files (like in-office photos) in Replit's filesystem or stub with placeholders.

Eliminate any external API dependencies from Supabase and make the backend fully self-contained within Replit.

üé® Design & Hosting:

Web-only platform

Runs entirely online

Hosted on Replit‚Äôs infrastructure

Interface and interaction language: English

UI style: Clean, professional, data-centric with gamified elements (e.g., leaderboards, rewards)

Ensure modularity for future enterprise scaling. Prioritize code readability and maintainability.

Would you like a scaffolded file structure or tech stack recommendation (e.g., Express.js + Replit DB + EJS/React)?





You said:
refactor and improve codebase and code quaility


ChatGPT said:
Great ‚Äî you're looking to refactor and improve the codebase and overall code quality as part of the rebuild on Replit. I'll now enhance the prompt further by explicitly including code quality goals, best practices, and structure expectations.

‚úÖ Enhanced Replit Agent Prompt ‚Äî Hi-Bridge: Full Migration, Build & Codebase Refactor
Rebuild and refactor a web-based hybrid work engagement platform called Hi-Bridge. The application was originally built using Supabase and now must be fully hosted on Replit‚Äôs infrastructure.

üß© Core Functionalities:
User Roles: Employee, Manager, HR ‚Äî each with tailored access and dashboards.

Anchor Day Scheduling: Managers assign; employees vote.

Daily Pulse Checks: Feedback forms submitted by employees to monitor morale.

Gamification: Points for participation, leaderboard for teams.

Dashboards:

Managers: Heatmaps, team sentiment trends.

HR: Engagement and policy compliance metrics.

Policy Management: Role-based hybrid rules, manager overrides, and compliance tracking.

Beta Program: "Hi-Bridge Games" mode ‚Äî photo uploads, points bonuses, public leaderboard.

üîÅ Supabase to Replit Refactor Requirements:
Replace PostgreSQL (Supabase) with Replit Database (use SQLite for structured queries or Replit Key-Value DB for simplicity).

Replace Supabase Auth with custom Express-based session auth or Replit Auth Helper.

Substitute real-time features with WebSockets or polling if needed.

Move file handling (photo uploads) to Replit filesystem or stub with placeholder logic.

Eliminate Supabase-specific SDKs and queries entirely.

üßº Codebase & Quality Expectations:
Use modular architecture: Separate routes, models, controllers, and services.

Apply SOLID principles and clean coding standards (e.g., meaningful names, separation of concerns).

Include comments and JSDoc annotations for clarity.

Implement basic error handling and validation for all user inputs.

Set up .env configuration, use dotenv for environment variables.

Use async/await, avoid callback hell or deeply nested logic.

Include basic unit test scaffolding using a lightweight framework like Jest or Vitest.

Prioritize readability and maintainability for future enterprise scaling.

üåê Platform & Interface:
Web-based, online-only

Interface language: English

Hosting: Replit native

UI style: Professional, clean, and data-focused with gamified UX elements

Final output should be fully runnable on Replit, with an organized file structure and comments to guide future developers.

Let me know if you'd like a starter file structure, tech stack setup, or code snippets for things like:

Replit database wrappers

Express auth middleware

Leaderboard logic

